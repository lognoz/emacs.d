#!/usr/bin/env sh
:; # -*- mode: emacs-lisp; lexical-binding: t -*-
:; emacs="emacs --init-directory=../"
:; batch="$emacs -q --no-site-file --batch "
:; $batch --load "$0" -- "$@" || exit=$?
:; exit

;;; bin/embla --- Bin executable

;; Copyright (c) Marc-Antoine Loignon <developer@lognoz.org>

;; Author: Marc-Antoine Loignon <developer@lognoz.org>
;; URL: https://github.com/lognoz/embla
;; Version: 0.1.0
;; Package-Requires: ((emacs "28.0"))

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <https://www.gnu.org/licenses/>.

;;; Code:

(setq user-emacs-directory command-line-default-directory)
(setq load-file-name (expand-file-name "lisp/" user-emacs-directory))

(defvar embla-command-line-arg (car (cdr (member "--" command-line-args)))
  "Command-line arguments passed to bin.")

(defvar embla-command-line-help "Usage: ./embla [arguments]

Arguments:
  install      Install packages and compile system
  help         Print help (this message) and exit
  version      Print version information and exit")

(defun embla-install ()
  "Install packages and compile system."
  (setq package-user-dir (expand-file-name "elpa/" user-emacs-directory))
  (setq embla-command-line-p t)
  (package-initialize)
  (let ((inhibit-message t))
    (load (expand-file-name "lisp/load-up" user-emacs-directory) nil 'nomessage)
    (embla-reload)
    (let ((dir (file-name-directory load-file-name)))
      (dolist (file (directory-files-recursively dir ""))
        (load file nil 'nomessage)))
    (embla-reload-site-lisp)))

(defun embla-print-version ()
  "Print version information"
  (load (expand-file-name "lisp/load-up" user-emacs-directory) nil 'nomessage)
  (message (format "Embla %s" embla-version))
  (message (emacs-version)))

(cond ((equal embla-command-line-arg "install")
        (embla-install))
      ((equal embla-command-line-arg "version")
        (embla-print-version))
      (t (message embla-command-line-help)))

;;; embla ends here
